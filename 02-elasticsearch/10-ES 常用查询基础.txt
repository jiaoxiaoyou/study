
# 创建索引
PUT	/good

# 插入数据
POST /good/fruit/1
{
    "name": "xiangjiao",
    "price": 60,
    "producer": "zhongguo",
    "desc": "xiangtian,kekou",
    "tags": [
        "chang",
        "zhi",
        "huang"
    ]
}
POST /good/fruit/2
{
    "name": "pingguo",
    "price": 20,
    "producer": "zhongguo",
    "desc": "haixing,haochi",
    "tags": [
        "da",
        "yuan"
    ]
}
POST /good/fruit/3
{
    "name": "lzi",
    "price": 10,
    "producer": "zhongguo",
    "desc": "zide",
    "tags": [
        "suan",
        "tian"
    ]
}
POST /good/fruit/4
{
    "name": "boluo",
    "price": 74,
    "producer": "zhongguo",
    "desc": "getouda",
    "tags": [
        "huang",
        "youci"
    ]
}
POST /good/fruit/5
{
    "name": "mihoutao",
    "price": 45,
    "producer": "xinxilan",
    "desc": "suan",
    "tags": [
        "lv",
        "huang"
    ]
}
POST /good/fruit/6
{
    "name": "xigua",
    "price": 109,
    "producer": "zhongguo",
    "desc": "haochi",
    "tags": [
        "da",
        "haochi"
    ]
}
POST /good/fruit/7
{
    "name": "pingguo",
    "price": 109,
    "producer": "zhongguo",
    "desc": "haochi",
    "tags": [
        "da",
        "haochi"
    ]
}

# 查询数据
GET	/good/fruit/1



#注意：如果数据不存在则新增数据，如果数据存在，则执行修改
#注意：put指令，做修改操作时未指定其它字段，则按照指定的字段进行修改操作

#注意：POST指令，执行修改操作，通过"_update"来完成修改操作。
# 更新数据
POST	/good/fruit/1/_update

{
    "doc": {
        "price": 45
    }
}

# 删除数据
DELETE	/good/fruit/1


# 按某个字段查
GET	/good/fruit/_search?q=producer:zhongguo


GET	/good/fruit/_search
{
    "query":{
        "match":{
            "producer":"zhongguo"
        }
    }
}

# 查询全部数据
GET	/good/fruit/_search
{
    "query":{
        "match_all":{

        }
    }
}

#注意：在排序的过程中只能使用可排的（数字或者日期）属性
# 按 price 降序排序
GET /good/fruit/_search
{
    "query":{
        "match":{
            "producer":"zhongguo"
        }
    },
    "sort":[
        {
            "price":{
                "order":"desc"
            }
        }
    ]
}


# 分页查询
# 从第0条开始，每页2条
GET /good/fruit/_search
{
    "query":{
        "match":{
            "name":"pingguo"
        }
    },
    "sort":[
        {
            "price":{
                "order":"asc"
            }
        }
    ],
    "from":0,
    "size":2
}

# 所有查询条件都是可插拔的，用","间隔

# 返回指定内容
GET /good/fruit/_search
{
    "query":{
        "match_all":{

        }
    },
    "_source":"name"
}

多个条件
GET /good/fruit/_search
{
    "query":{
        "match_all":{

        }
    },
    "_source":["name","price"]
}

# bool 查询
# 按多条件查询，AND 同时满足多个条件
GET /good/fruit/_search
{
    "query":{
        "bool":{
            "must":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                },
                {
                    "match":{
                        "producer":"zhongguo"
                    }
                }
            ]
        }
    }
}

# OR
GET /good/fruit/_search
{
    "query":{
        "bool":{
            "should":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                },
                {
                    "match":{
                        "producer":"zhongguo"
                    }
                }
            ]
        }
    }
}

# must_not
GET /good/fruit/_search
{
    "query":{
        "bool":{
            "must_not":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                },
                {
                    "match":{
                        "producer":"zhongguo"
                    }
                }
            ]
        }
    }
}

# filter 属于bool查询内的过滤条件，和 must 同级
# lt：小于
# lte：小于等于
# gt：大于
# gte：大于等于
GET /good/fruit/_search
{
    "query":{
        "bool":{
            "must":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                }
            ],
            "filter": {
              "range": {
                "price": {
                  "gte": 100
                }
              }
            }
        }
    }
}


# 如果过滤条件使用should的话，检索的结果可能会出现问题（_score为0），建议使用must关键字
GET /good/fruit/_search
{
    "query":{
        "bool":{
            "should":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                }
            ],
            "filter": {
              "range": {
                "price": {
                  "gte": 100
                }
              }
            }
        }
    }
}


# 检索数据类型的数据，直接通过全文检索，可以匹配多个值，通过空格间隔
GET /good/fruit/_search
{
    "query":{
        "match":{
            "tags":"haochi lv"
        }
    }
}

# 短语检索
GET /good/fruit/_search
{
    "query":{
        "match_phrase":{
            "name":"pingguo"
        }
    }
}

# 高亮显示
GET /good/fruit/_search
{
    "query":{
        "match":{
            "name":"pingguo"
        }
    },
    "highlight":{
      "pre_tags": "<b style='color':red>",
      "post_tags": "</b>",
      "fields": {
        "name":{}
      }
    }
}


# 聚合
GET /good/fruit/_search
{
  "from":0,
  "size":20,
  "aggs":{
    "price_avg":{
      "avg": {
        "field": "price"
      }
    }
  }
}

# 只显示聚合结果 size:0
GET /good/fruit/_search
{
  "size":0,
  "aggs":{
    "price_avg":{
      "avg": {
        "field": "price"
      }
    }
  }
}


# 搜name:pingguo 然后聚合
GET /good/fruit/_search
{
  "size":0,
  "query":{
    "match":{
      "name":"pingguo"
    }
  },
  "aggs":{
    "price_avg":{
      "avg": {
        "field": "price"
      }
    }
  }
}

# 聚合函数的使用，一定是先查询再使用聚合函数
# 查询name为苹果，价钱大于100 然后再聚合求平均值
GET /good/fruit/_search
{
    "size":0,
    "query":{
        "bool":{
            "must":[
                {
                    "match":{
                        "name":"pingguo"
                    }
                }
            ],
            "filter":{
                "range":{
                    "price":{
                        "gte":100
                    }
                }
            }
        }
    },
    "aggs":{
        "price_avg":{
            "avg":{
                "field":"price"
            }
        }
    }
}


# 查询各价格阶段的个数
GET /good/fruit/_search
{
  "size":0,
  "aggs":{
    "count":{
      "range": {
        "field": "price",
        "ranges": [
          {
            "from": 0,
            "to": 50
          },
          {
            "from": 50,
            "to": 100
          },
          {
            "from": 100,
            "to": 150
          },
          {
            "from": 200,
            "to": 250
          }
        ]
      }
    }
  }
}



# 区间查询再聚合
GET /good/fruit/_search
{
  "size":0,
  "aggs":{
    "count":{
      "range": {
        "field": "price",
        "ranges": [
          {
            "from": 0,
            "to": 50
          },
          {
            "from": 50,
            "to": 100
          },
          {
            "from": 100,
            "to": 150
          },
          {
            "from": 200,
            "to": 250
          }
        ]
      },
      "aggs": {
        "sum_price": {
          "sum": {
            "field": "price"
          }
        }
      }
    }
  }
}

1. 先执行 ./goods.sh

2. 按name 聚合查询
POST /goods/_search
{
  "aggs": {
    "group_by_name": {
      "terms": {
        "field": "name.keyword"
      }
    }
  }
}
3.只展示聚合结果
{
  "size":0,
  "aggs": {
    "group_by_name": {
      "terms": {
        "field": "name.keyword"
      }
    }
  }
}

4. 查询产地producer是zhongguo的，按name聚合查询
{
  "query": {
    "match": {
      "producer": "zhongguo"
    }
  },
  "size": 0,
  "aggs": {
    "group_by_name": {
      "terms": {
        "field": "name.keyword"
      }
    }
  }
}

5. 查询产地producer不是zhongguo的，name不是pingguo的
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "producer": "zhongguo"
          }
        },
        {
          "match": {
            "name": "pingguo"
          }
        }
      ]
    }
  }
}

6. query  和 filter
query和filter一起使用时先执行filter
filter：性能更好，无排序，不计算相关度分数，会缓存查询结果
query：性能较差，有排序，计算相关度分数，不会缓存

7. 查询producer是zhongguo，name是pingguo，price大于等于60的
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "producer": "zhongguo"
          }
        },
        {
          "match": {
            "name": "pingguo"
          }
        }
      ],
      "filter": {
        "range": {
          "price": {
            "gte": 60
          }
        }
      }
    }
  }
}

8.查询各价格阶段的个数
/good/fruit/_search
{
  "size":0,
  "aggs":{
    "count":{
      "range": {
        "field": "price",
        "ranges": [
          {
            "from": 0,
            "to": 50
          },
          {
            "from": 50,
            "to": 100
          },
          {
            "from": 100,
            "to": 150
          },
          {
            "from": 200,
            "to": 250
          }
        ]
      }
    }
  }
}

9. 先按name聚合再按price 聚合查询
{
  "size": 0,
  "aggs": {
    "group_by_name": {
      "terms": {
        "field": "name.keyword"
      },
      "aggs": {
        "group_by_price": {
          "terms": {
            "field": "price"
          }
        }
      }
    }
  }
}

10.get-together/event索引中把tags数组里的值进行聚合
{
  "size": 0,
  "aggs": {
    "agg_tags": {
      "terms": {
        "field": "tags.verbatim"
      }
    }
  }
}
11、查询producer是zhongguo，name是pingguo或者xiangjiao的
goods/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "producer.keyword": "zhongguo"
          }
        },
        {
          "bool": {
            "should": [
              {
                "term": {
                  "name.keyword": "pingguo"
                }
              },
              {
                "term": {
                  "name.keyword": "xiangjiao"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

错误示例：
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "producer.keyword": "zhongguo"
          }
        }
      ],
      "should": [
        {
          "term": {
            "name.keyword": "pingguo"
          }
        },
        {
          "term": {
            "name.keyword": "xiangjiao"
          }
        }
      ]
    }
  }
}

12、统计每个国家有几种水果
goods/_search
{
  "size": 0,
  "aggs": {
    "group_by_producer": {
      "terms": {
        "field": "producer.keyword"
      },
      "aggs": {
        "distinct_name": {
          "cardinality": {
            "field": "name.keyword"
          }
        }
      }
    }
  }
}

给goods/fruit 的mapping增加created_on,定义为date类型
POST goods/fruit
{
  "properties": {
    "created_on": {
      "format": "yyyy-MM-dd",
      "type": "date"
    }
  }
}

13、按照created_on时间分组聚合（最好的就是再加个某个时间范围内的，然后按时间分组聚合）
get-together/_search
# 使用date_histogram，字段类型必须是date 类型

{
  "aggs": {
    "group_by_created_on": {
      "date_histogram": {
        "field": "created_on",
        "interval": "day",
        "format": "yyyy-MM-dd"
      }
    }
  }
}

度量聚合
查询最近7天name:pingguo的均价
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "name.keyword": "pingguo"
          }
        }
      ],
      "filter": {
        "range": {
          "created_on": {
            "gte": "now-6d/d"
          }
        }
      }
    }
  },
  "aggs": {
    "sum_price": {
      "avg": {
        "field": "price"
      }
    }
  }
}

1. 统计本周的数据
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "created_on": {
            "gte": "now/w"
          }
        }
      }
    }
  }
}

2. 统计近7天的数据
/goods/fruit/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "created_on": {
            "gte": "now-6d/d"
          }
        }
      }
    }
  }
}
3. 统计本月的数据
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "created_on": {
            "gte": "now/M"
          }
        }
      }
    }
  }
}

{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "EVENT_TYPE.keyword": "14"
          }
        },
        {
          "term": {
            "NAME.keyword": "安全事件"
          }
        }
      ],
      "filter": {
        "range": {
          "START_TIME": {
            "gte": "now-6d/d"
          }
        }
      }
    }
  },
  "size": 0,
  "aggs": {
    "group_by_协议": {
      "terms": {
        "field": "APP_PROTOCOL.keyword"
      }
    },
    "group_by_端口": {
      "terms": {
        "field": "DEST_PORT"
      }
    },
    "group_by_级别": {
      "terms": {
        "field": "SEVERITY.keyword"
      }
    },
    "distinct_设备量": {
      "cardinality": {
        "field": "DVC_ADDRESS"
      }
    }
  }
}


一次查按name和按producer聚合
{
  "size": 0,
  "aggs": {
    "group_by_producer": {
      "terms": {
        "field": "producer.keyword"
      }
    },
	"group_by_name": {
      "terms": {
        "field": "name.keyword"
      }
    }
  }
}

filter
filter字段提供了过滤的功能，使用两种方式：include可以匹配出包含该值的文档，exclude则排除包含该值的文档。
例如：

{
    "aggs" : {
        "tags" : {
            "terms" : {
                "field" : "tags",
                "include" : ".*sport.*",
                "exclude" : "water_.*"
            }
        }
    }
}

{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "START_TIME": {
            "gte": "now-6d/d"
          }
        }
      }
    }
  },
  "size": 0,
  "aggregations": {
    "group_by_CAT4_ID": {
      "terms": {
        "field": "CAT4_ID.keyword",
        "include": [
          "attack",
          "virus"
        ]
      },
      "aggregations": {
        "group_by_START_TIME": {
          "date_histogram": {
            "field": "START_TIME",
            "interval": "day",
            "format": "yyyy-MM-dd"
          }
        }
      }
    }
  }
}















